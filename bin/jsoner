#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
json解析工具

"""
from __future__ import unicode_literals, print_function, absolute_import

import sys
import json
import argparse
from pprint import pprint

# 编码问题
reload(sys)
sys.setdefaultencoding('utf-8')

__version__ = '1.0.0'
__author__ = 'JinnLynn <eatfishlin@gmail.com>'
__license__ = 'The MIT License'
__copyright__ = 'Copyright 2015-2016 JinnLynn'


def get(data, key):
    for k in key.split('.'):
        try:
            k = int(k)
        except ValueError as e:
            pass
        data = data[k]
    return data


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', help='json file')
    parser.add_argument('-s', '--string', help='json string')
    parser.add_argument('-k', '--key', action="append", help='json key')
    parser.add_argument('-n', '--node')
    parser.add_argument('--print-fmt')
    parser.add_argument('--print-sep', default='\n')
    args = parser.parse_args()

    data = None
    try:
        if args.string is not None:
            data = json.loads(args.string)
        elif args.file:
            with open(args.file, 'r') as fp:
                data = json.load(fp, encoding='utf8')
        else:
            data = json.load(sys.stdin)
    except Exception as e:
        sys.exit(1)

    if not args.key:
        sys.exit('missing key' if not args.quiet else 1)

    values = []
    try:
        if args.node:
            data = get(data, args.node)
        for key in args.key:
            for k in key.split(','):
                ret = get(data, k)
                ret = '' if ret is None else str(ret)
                values.append(ret)
    except Exception as e:
        sys.exit(1)

    if not values:
        sys.exit(1)

    if not args.print_fmt:
        print(args.print_sep.join(values))
    else:
        output = args.print_fmt
        for v in values:
            output = output.replace('%%', v, 1)
        print(output)
